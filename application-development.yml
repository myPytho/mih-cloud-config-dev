eureka: 
  instance: 
    instance-id: ${spring.cloud.client.ip-address}:${server.port} 
    lease-expiration-duration-in-seconds: 10
    lease-renewal-interval-in-seconds: 5 
  client: 
    registry-fetch-interval-seconds: 5  
    healthcheck: 
      enabled: true  
  server:
    eviction-interval-timer-in-ms: 4000
    renewal-threshold-update-interval-ms: 120000
feign: 
  httpclient: 
    enabled: false
  okhttp: 
    enabled: true  
  client: 
    pass: 
      headers:
        - token
        - tenantid
        - userid
        - openid
        - scope
        - providerid
        - clientid
    config: 
      default: 
        connectTimeout: 100000
        readTimeout: 300000
      his-service: 
        connectTimeout: 10000
        readTimeout: 300000
ribbon:
  connectTimeout: 10000
  readTimeout: 300000
  socketTimeout: 300000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 0
  ServerListRefreshInterval: 2000
server: 
  tomcat: 
    accept-count: 20 
    max-connections: 10 # Maximum number of connections that the server accepts and processes at any given time.
    max-threads: 10 # Maximum number of worker threads.
    min-spare-threads: 5 # Minimum number of worker threads.
    max-http-header-size: 81920 
spring: 
  kafka: 
    bootstrap-servers:
    - 10.0.0.110:9092
  cloud: 
    stream:  
      default-binder: cloud-bus   
      bindings: 
        springCloudBusInput:           
          binder: cloud-bus
          group: ${spring.application.name}-${spring.cloud.client.ip-address}-${server.port}
        springCloudBusOutput: 
          binder: cloud-bus
          group: ${spring.application.name}-${spring.cloud.client.ip-address}-${server.port}
        social-message-receive-out: 
          binder: social-message
          destination: social.message.receive
          group:  ${spring.application.name}-social.message.receive.out
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        social-message-receive-in: 
          binder: social-message
          destination: social.message.receive
          group:  ${spring.application.name}-social.message.receive.in
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        social-message-send-complete-out: 
          binder: social-message
          destination: social.message.send
          group:  ${spring.application.name}-social.message.send.complete.out
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        social-message-send-complete-in: 
          binder: social-message
          destination: social.message.send
          group:  ${spring.application.name}-social.message.send.complete.in
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        pay-notify-out: 
          binder: pay-notify
          destination: pay.notify
          group:  ${spring.application.name}-pay.notify.out
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        pay-notify-in: 
          binder: pay-notify
          destination: pay.notify
          group:  ${spring.application.name}-pay.notify.in
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        refund-notify-out: 
          binder: pay-notify
          destination: refund.notify
          group:  ${spring.application.name}-refund.notify.out
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        refund-notify-in: 
          binder: pay-notify
          destination: refund.notify
          group:  ${spring.application.name}-refund.notify.in
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        report-data-output: 
          binder: report-data
          destination: report.data
          group:  ${spring.application.name}-report.data.out
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        report-data-input: 
          binder: report-data
          destination: report.data
          group:  ${spring.application.name}-report.data.in
          consumer: 
            max-attempts: 1
            headerMode: embeddedHeaders
          producer: 
            headerMode: embeddedHeaders
        
      binders: 
        cloud-bus: 
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: 10.0.0.110
        social-message:   
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: 10.0.0.110
        pay-notify:   
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: 10.0.0.110
        report-data:   
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: 10.0.0.110

    bus: 
      trace: 
        enabled: true
    sampler:
      probability: 1.0
  zipkin: 
    sender: 
      type: KAFKA
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy:  org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  cache:
    type: REDIS
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Asia/Shanghai
    serialization:
      write-dates-as-timestamps: false
      write-null-map-values: false
      write-empty-json-arrays: false
    deserialization:
      accept-single-value-as-array: true
      accept-empty-array-as-null-object: true
  redis: 
    database: 0
    host: 10.0.0.110
    port: 6379
    password: "{cipher}AQBSQDWwxoE1MOTovH4bgd6HwPk3m0wMaN0Btc0Vc4Pl/K9NzPXOzl88+JcmnkZAGQYwJ1kLQW0RV41r7a0n33VmwBXXpwIM/3Z3zrERNChRJtAV6o92yjN9HaY2iaSk6fIBTUSbTWiDyLFyDcTQqLTmueA/ZSNWW4bXTQIscjkvfAyoxqOBFXa4nQ3DNYp1gz5nmw7fCQewnj19mENZKmEhy6Cqi9264EMEIFZmNAKpcyELjoDFvCZxGMtK1T1FhVwinb5Q1Eg8vdFZfHKAZzkBJfoySpSt8QPE0rToZxbrzeU3TOX4lOScb9HcXKtexy0nX440OJjEU+1ec6V2yUF3vTvj+TijfXEtWqBLyroc+aR2BG1lVX4nUMWI5yRYhow="
    jedis:
      pool:
        max-active: 20
    timeout: 2000  
  data: 
    mongodb: 
      authentication-database: admin
      database: ehr
      host: 10.0.0.61
      username: "{cipher}AQA/s5pIwcUXXSP+BFEpBpHq0MUF3Pfu3zs5IvdY75FPlbxBMIlpqu4hUivG67LaQM0vaW92VSPavyTOQGOXsYD+qLufRF/o9umxtdF4dGvQ+Gla+jfafkExhHgJnJnjxpROrwrD9qkS2FGZBHD/CXEKH48nZADfxiCGvR+sbu3cGgZJMtvvPPdcmrHekW0AZUC5VOCejfR/HEO7DnwQ7yy13+YXpISMknVbTwmbN9b2c1i7icXpziM1leEZPh7L+XGaCTxLS3W6k+5lrXdpW5gnAIoiujP0Nys4S4NHh77xaryJBnGsAESrG7kwnfrvTZ4/qIA4rl3xVyKkM4XW8KOpEG+pdKhzxho0gkH9rSYttUPHciA7PGW3YsJDdWIu/E0="
      password: "{cipher}AQBReaGWb+mCcK/RE8Yt7MqDga4YUN5VXhXr77HsX4u/wuVhX5D6B47s1U3NuJBRXD03EHhkxPBOJ5TSZY3TddJ++qbVS93fln2m1HFoCvtbjVPBmOIVCNGrOWhoq6fruf8NBdofG/bshN7OzNHcsfdXlSZ5Jx7wHaBH5SYLdPrLn+S3dVes08AWlESEFl4LUYROz08pX20Je/NkQ69mTC+8IM4+thL8UdXkjKvhfwO9Mdd5SPx9g5uciFnbMQPkO3SDF5eLnjNBu190do8ykg6HIHcCPlNSypoaFRTfau17HG+KE8BuXR2f/8MWOvbG2gi85qBQOzMm1DSTxLm4CMt1FEijX+vg7HvecU1dtfPTACnziO77zCHaH/k2fLOVP8Y="
      port: 27017
cloudhub: 
  access-token-url: "http://111.230.166.38/mwp/token/api/getAccessToken"
  api-url: "http://111.230.166.38/mwp"
  client-id: "{cipher}AQAfHfBguC8b3snvlQIPgFkVL9ylOmwiHNTXMm24fxtFxkDKQ5ONdyTSNvQpmY1x0n9XrYQkgiZABrThVm9JjU43r+W1fYCYoqS3zk3IfQ/yiqUnqPulOoL22fxWPqb5q0WuyrEJUZcj/J5WbbBw7hPI/s4aIMdFFNHNoeWC2zarFaE+pLpfkpiwWkPT416ACf2PEFuhIof5toq65dt77DZFc2kYhHRUn9EXv0vy9MLG9pr7AOjcmKAac5RFqziB/pab5/sjsNpkL63DpZX1nrniTeHGWgOBX3bXhzPTnssJN3PcRtCUCAWpkUbjAWu2+YkLlBPfe7x3xQ862gisqi0dlAK3DDKwwnSeXChJEfS9FVaBqG8uaUO8a73KYrCwT/8BWNGO5n/ucNoH6lk6cxLp"
  secret: "{cipher}AQB6cFsC0oLBn4Zo9x1hDJqt00EYvFBqxBX6xHkZbZpHrR81cE14srPRyTPAy1s4qKDPDB7a3T4Ojddt4Sb3Ml+WMiypxlosbzQjzg97/nKZ+/IhzHYym9ODIhtgnKqW6/mXbQUVI3naqeNtOUDI3aTX7B0aitOaG/3vetH1VUE6VBI37zNuul5ZfMStIHx1tgS1dBUgJJkr55NcBqoJ8UkiQA8QNsO4S+PFdGHtRYtKaKT1MnIWPQJbTLWVUFhNByZ3/4W+nxvgJfk/po3bBWYRczlOnuDJfodmegO1O4GUUOkB/QRH86ebFYGk2ykGWXjf4A/ilU0Akh/BavTUFYFmpFG+ygrDQ0d53PxQ/N2waZ6P/1zXNLfEWf/4EtVRDwOnRD8+7YM/wFGj/bzLTnVxzcq5Nug0iSuuZtQLPaDTMg=="
kingdeehit:
  api-gateway: "https://dev.mhealth100.com/gateway"
  host: "https://dev.mhealth100.com"
  payment-gateway: 
    callback-url: "/patient/base/#/result"
logging:
  config: classpath:log4j2-development.yml
  level: 
    com.kingdeehit.cloud: debug
    org.apache.kafka: info
    org.apache.flume: info
    com.netflix.discovery: info    
    com.kingdeehit.cloud.social.wechat.api: debug
    org.springframework.kafka: info
    org.apache.http: info
    io.lettuce: info 
    kingdeehit.Cloud.API: debug
management: 
  endpoint: 
    health: 
      show-details: ALWAYS
  endpoints:
    web: 
      exposure:
        include: "*"
  health: 
    kafka: 
      enabled: true
    binders: 
      enabled: true
miniprogram:
  wechat:
    appid: "{cipher}AQCBVdev4SryG8nZ6jiU5cNbodyC2ahMRYNk6XdH9l0tDevz7eUbH+frpuWnqBrsPAT70JS5saG8Z0b7e4kN4LWpj3NeobpW+/Mrn8KMh0dlKgerqCHKtinFyw1Nuo9oRUfpMR24Bdsa69Rrack0WAgIuwTkaPKbg0I8bPEOQ1yHdbxXJfAY7e600rQI7xlZrUxd6SvD+vwqi5//qIQB7VqKgH/TuMUNUUqpabPf7TVvyaBVkV9G4BGtBtTQnh5iLeFZ7TVpZnBHVZ5nZlsV7e1tWq/IiSeiL9b11zRmwKhz4uUbeDdVrFb189YMJi8okWiPzZ7UaD2JZ17MyBlHjn4Bg11OMHKhKCmk0BfXPouhiPL6GsHFD4zn1ZeVyURG8cFctgSkUN6kpXbpm0IEKQFW"
    secret: "{cipher}AQBvYt6io83kXHx2/vnXf5mBJoEU5c27jKLm/eH97xUdPfD/hyw6rVEFROLxPBG7WdeOqP+ZhOmH+kn0c83Fhl8pVKhpLmnq9YTBYwtLbYvK60WF3MwHuwHzi0jlJJki4+4Ys6EPiPViPOQHrAIfxHkdj4o7a8QUHeNcnIYKWqD5kaiWF7BMhAwU4w2U2z+tNKP6WrGT5QZ9jCoQOmxBvZoEW0Q7A1O/eM+KEVaZu6GZ7JjJ4C0mXANvIUURgZpeCV/9K9brRuz7f60f9YC7sKMtcoQ8+GYi2IFqUhcsg4p1vh+ZPQJZZqQufPUOt6pbMt/DO7bMk0KrsXdR3bH7A4EWWycUwcNsP0a7TLYjeM8KXa4DIC/c8Gm+2wxge45LxLPokmSWaJBDAQyksZ//KQbrc/jzKT/Lj4r49LNYX9OKRg=="
